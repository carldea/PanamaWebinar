// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class foo_h  {

    /* package-private */ foo_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    public static int __has_ptrcheck() {
        return (int)0L;
    }
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    public static int __MAC_10_14_6() {
        return (int)101406L;
    }
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    public static int __MAC_10_15_4() {
        return (int)101504L;
    }
    public static int __MAC_10_16() {
        return (int)101600L;
    }
    public static int __MAC_11_0() {
        return (int)110000L;
    }
    public static int __MAC_11_1() {
        return (int)110100L;
    }
    public static int __MAC_11_3() {
        return (int)110300L;
    }
    public static int __MAC_11_4() {
        return (int)110400L;
    }
    public static int __MAC_11_5() {
        return (int)110500L;
    }
    public static int __MAC_11_6() {
        return (int)110600L;
    }
    public static int __MAC_12_0() {
        return (int)120000L;
    }
    public static int __MAC_12_1() {
        return (int)120100L;
    }
    public static int __MAC_12_2() {
        return (int)120200L;
    }
    public static int __MAC_12_3() {
        return (int)120300L;
    }
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    public static int __IPHONE_12_4() {
        return (int)120400L;
    }
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    public static int __IPHONE_13_3() {
        return (int)130300L;
    }
    public static int __IPHONE_13_4() {
        return (int)130400L;
    }
    public static int __IPHONE_13_5() {
        return (int)130500L;
    }
    public static int __IPHONE_13_6() {
        return (int)130600L;
    }
    public static int __IPHONE_13_7() {
        return (int)130700L;
    }
    public static int __IPHONE_14_0() {
        return (int)140000L;
    }
    public static int __IPHONE_14_1() {
        return (int)140100L;
    }
    public static int __IPHONE_14_2() {
        return (int)140200L;
    }
    public static int __IPHONE_14_3() {
        return (int)140300L;
    }
    public static int __IPHONE_14_5() {
        return (int)140500L;
    }
    public static int __IPHONE_14_6() {
        return (int)140600L;
    }
    public static int __IPHONE_14_7() {
        return (int)140700L;
    }
    public static int __IPHONE_14_8() {
        return (int)140800L;
    }
    public static int __IPHONE_15_0() {
        return (int)150000L;
    }
    public static int __IPHONE_15_1() {
        return (int)150100L;
    }
    public static int __IPHONE_15_2() {
        return (int)150200L;
    }
    public static int __IPHONE_15_3() {
        return (int)150300L;
    }
    public static int __IPHONE_15_4() {
        return (int)150400L;
    }
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    public static int __TVOS_12_4() {
        return (int)120400L;
    }
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    public static int __TVOS_13_2() {
        return (int)130200L;
    }
    public static int __TVOS_13_3() {
        return (int)130300L;
    }
    public static int __TVOS_13_4() {
        return (int)130400L;
    }
    public static int __TVOS_14_0() {
        return (int)140000L;
    }
    public static int __TVOS_14_1() {
        return (int)140100L;
    }
    public static int __TVOS_14_2() {
        return (int)140200L;
    }
    public static int __TVOS_14_3() {
        return (int)140300L;
    }
    public static int __TVOS_14_5() {
        return (int)140500L;
    }
    public static int __TVOS_14_6() {
        return (int)140600L;
    }
    public static int __TVOS_14_7() {
        return (int)140700L;
    }
    public static int __TVOS_15_0() {
        return (int)150000L;
    }
    public static int __TVOS_15_1() {
        return (int)150100L;
    }
    public static int __TVOS_15_2() {
        return (int)150200L;
    }
    public static int __TVOS_15_3() {
        return (int)150300L;
    }
    public static int __TVOS_15_4() {
        return (int)150400L;
    }
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    public static int __WATCHOS_5_3() {
        return (int)50300L;
    }
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    public static int __WATCHOS_6_1() {
        return (int)60100L;
    }
    public static int __WATCHOS_6_2() {
        return (int)60200L;
    }
    public static int __WATCHOS_7_0() {
        return (int)70000L;
    }
    public static int __WATCHOS_7_1() {
        return (int)70100L;
    }
    public static int __WATCHOS_7_2() {
        return (int)70200L;
    }
    public static int __WATCHOS_7_3() {
        return (int)70300L;
    }
    public static int __WATCHOS_7_4() {
        return (int)70400L;
    }
    public static int __WATCHOS_7_5() {
        return (int)70500L;
    }
    public static int __WATCHOS_7_6() {
        return (int)70600L;
    }
    public static int __WATCHOS_8_0() {
        return (int)80000L;
    }
    public static int __WATCHOS_8_1() {
        return (int)80100L;
    }
    public static int __WATCHOS_8_3() {
        return (int)80300L;
    }
    public static int __WATCHOS_8_4() {
        return (int)80400L;
    }
    public static int __WATCHOS_8_5() {
        return (int)80500L;
    }
    public static int MAC_OS_X_VERSION_10_0() {
        return (int)1000L;
    }
    public static int MAC_OS_X_VERSION_10_1() {
        return (int)1010L;
    }
    public static int MAC_OS_X_VERSION_10_2() {
        return (int)1020L;
    }
    public static int MAC_OS_X_VERSION_10_3() {
        return (int)1030L;
    }
    public static int MAC_OS_X_VERSION_10_4() {
        return (int)1040L;
    }
    public static int MAC_OS_X_VERSION_10_5() {
        return (int)1050L;
    }
    public static int MAC_OS_X_VERSION_10_6() {
        return (int)1060L;
    }
    public static int MAC_OS_X_VERSION_10_7() {
        return (int)1070L;
    }
    public static int MAC_OS_X_VERSION_10_8() {
        return (int)1080L;
    }
    public static int MAC_OS_X_VERSION_10_9() {
        return (int)1090L;
    }
    public static int MAC_OS_X_VERSION_10_10() {
        return (int)101000L;
    }
    public static int MAC_OS_X_VERSION_10_10_2() {
        return (int)101002L;
    }
    public static int MAC_OS_X_VERSION_10_10_3() {
        return (int)101003L;
    }
    public static int MAC_OS_X_VERSION_10_11() {
        return (int)101100L;
    }
    public static int MAC_OS_X_VERSION_10_11_2() {
        return (int)101102L;
    }
    public static int MAC_OS_X_VERSION_10_11_3() {
        return (int)101103L;
    }
    public static int MAC_OS_X_VERSION_10_11_4() {
        return (int)101104L;
    }
    public static int MAC_OS_X_VERSION_10_12() {
        return (int)101200L;
    }
    public static int MAC_OS_X_VERSION_10_12_1() {
        return (int)101201L;
    }
    public static int MAC_OS_X_VERSION_10_12_2() {
        return (int)101202L;
    }
    public static int MAC_OS_X_VERSION_10_12_4() {
        return (int)101204L;
    }
    public static int MAC_OS_X_VERSION_10_13() {
        return (int)101300L;
    }
    public static int MAC_OS_X_VERSION_10_13_1() {
        return (int)101301L;
    }
    public static int MAC_OS_X_VERSION_10_13_2() {
        return (int)101302L;
    }
    public static int MAC_OS_X_VERSION_10_13_4() {
        return (int)101304L;
    }
    public static int MAC_OS_X_VERSION_10_14() {
        return (int)101400L;
    }
    public static int MAC_OS_X_VERSION_10_14_1() {
        return (int)101401L;
    }
    public static int MAC_OS_X_VERSION_10_14_4() {
        return (int)101404L;
    }
    public static int MAC_OS_X_VERSION_10_14_6() {
        return (int)101406L;
    }
    public static int MAC_OS_X_VERSION_10_15() {
        return (int)101500L;
    }
    public static int MAC_OS_X_VERSION_10_15_1() {
        return (int)101501L;
    }
    public static int MAC_OS_X_VERSION_10_16() {
        return (int)101600L;
    }
    public static int MAC_OS_VERSION_11_0() {
        return (int)110000L;
    }
    public static int MAC_OS_VERSION_12_0() {
        return (int)120000L;
    }
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    public static int __DRIVERKIT_20_0() {
        return (int)200000L;
    }
    public static int __DRIVERKIT_21_0() {
        return (int)210000L;
    }
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    public static int _FORTIFY_SOURCE() {
        return (int)2L;
    }
    public static int RENAME_SECLUDE() {
        return (int)1L;
    }
    public static int RENAME_SWAP() {
        return (int)2L;
    }
    public static int RENAME_EXCL() {
        return (int)4L;
    }
    public static int RENAME_RESERVED1() {
        return (int)8L;
    }
    public static int RENAME_NOFOLLOW_ANY() {
        return (int)16L;
    }
    public static int __SLBF() {
        return (int)1L;
    }
    public static int __SNBF() {
        return (int)2L;
    }
    public static int __SRD() {
        return (int)4L;
    }
    public static int __SWR() {
        return (int)8L;
    }
    public static int __SRW() {
        return (int)16L;
    }
    public static int __SEOF() {
        return (int)32L;
    }
    public static int __SERR() {
        return (int)64L;
    }
    public static int __SMBF() {
        return (int)128L;
    }
    public static int __SAPP() {
        return (int)256L;
    }
    public static int __SSTR() {
        return (int)512L;
    }
    public static int __SOPT() {
        return (int)1024L;
    }
    public static int __SNPT() {
        return (int)2048L;
    }
    public static int __SOFF() {
        return (int)4096L;
    }
    public static int __SMOD() {
        return (int)8192L;
    }
    public static int __SALC() {
        return (int)16384L;
    }
    public static int __SIGN() {
        return (int)32768L;
    }
    public static int _IOFBF() {
        return (int)0L;
    }
    public static int _IOLBF() {
        return (int)1L;
    }
    public static int _IONBF() {
        return (int)2L;
    }
    public static int BUFSIZ() {
        return (int)1024L;
    }
    public static int FOPEN_MAX() {
        return (int)20L;
    }
    public static int FILENAME_MAX() {
        return (int)1024L;
    }
    public static int L_tmpnam() {
        return (int)1024L;
    }
    public static int TMP_MAX() {
        return (int)308915776L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int L_ctermid() {
        return (int)1024L;
    }
    public static int _USE_FORTIFY_LEVEL() {
        return (int)2L;
    }
    public static int TIME_UTC() {
        return (int)1L;
    }
    public static int _QUAD_HIGHWORD() {
        return (int)1L;
    }
    public static int _QUAD_LOWWORD() {
        return (int)0L;
    }
    public static int __DARWIN_LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __DARWIN_BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __DARWIN_PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int __DARWIN_FD_SETSIZE() {
        return (int)1024L;
    }
    public static int __DARWIN_NBBY() {
        return (int)8L;
    }
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    public static int F_OK() {
        return (int)0L;
    }
    public static int SEEK_HOLE() {
        return (int)3L;
    }
    public static int SEEK_DATA() {
        return (int)4L;
    }
    public static int ACCESSX_MAX_DESCRIPTORS() {
        return (int)100L;
    }
    public static int _PC_LINK_MAX() {
        return (int)1L;
    }
    public static int _PC_MAX_CANON() {
        return (int)2L;
    }
    public static int _PC_MAX_INPUT() {
        return (int)3L;
    }
    public static int _PC_NAME_MAX() {
        return (int)4L;
    }
    public static int _PC_PATH_MAX() {
        return (int)5L;
    }
    public static int _PC_PIPE_BUF() {
        return (int)6L;
    }
    public static int _PC_CHOWN_RESTRICTED() {
        return (int)7L;
    }
    public static int _PC_NO_TRUNC() {
        return (int)8L;
    }
    public static int _PC_VDISABLE() {
        return (int)9L;
    }
    public static int _PC_NAME_CHARS_MAX() {
        return (int)10L;
    }
    public static int _PC_CASE_SENSITIVE() {
        return (int)11L;
    }
    public static int _PC_CASE_PRESERVING() {
        return (int)12L;
    }
    public static int _PC_EXTENDED_SECURITY_NP() {
        return (int)13L;
    }
    public static int _PC_AUTH_OPAQUE_NP() {
        return (int)14L;
    }
    public static int _PC_2_SYMLINKS() {
        return (int)15L;
    }
    public static int _PC_ALLOC_SIZE_MIN() {
        return (int)16L;
    }
    public static int _PC_ASYNC_IO() {
        return (int)17L;
    }
    public static int _PC_FILESIZEBITS() {
        return (int)18L;
    }
    public static int _PC_PRIO_IO() {
        return (int)19L;
    }
    public static int _PC_REC_INCR_XFER_SIZE() {
        return (int)20L;
    }
    public static int _PC_REC_MAX_XFER_SIZE() {
        return (int)21L;
    }
    public static int _PC_REC_MIN_XFER_SIZE() {
        return (int)22L;
    }
    public static int _PC_REC_XFER_ALIGN() {
        return (int)23L;
    }
    public static int _PC_SYMLINK_MAX() {
        return (int)24L;
    }
    public static int _PC_SYNC_IO() {
        return (int)25L;
    }
    public static int _PC_XATTR_SIZE_BITS() {
        return (int)26L;
    }
    public static int _PC_MIN_HOLE_SIZE() {
        return (int)27L;
    }
    public static int _CS_PATH() {
        return (int)1L;
    }
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    public static int _XOPEN_VERSION() {
        return (int)600L;
    }
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    public static int _SC_ARG_MAX() {
        return (int)1L;
    }
    public static int _SC_CHILD_MAX() {
        return (int)2L;
    }
    public static int _SC_CLK_TCK() {
        return (int)3L;
    }
    public static int _SC_NGROUPS_MAX() {
        return (int)4L;
    }
    public static int _SC_OPEN_MAX() {
        return (int)5L;
    }
    public static int _SC_JOB_CONTROL() {
        return (int)6L;
    }
    public static int _SC_SAVED_IDS() {
        return (int)7L;
    }
    public static int _SC_VERSION() {
        return (int)8L;
    }
    public static int _SC_BC_BASE_MAX() {
        return (int)9L;
    }
    public static int _SC_BC_DIM_MAX() {
        return (int)10L;
    }
    public static int _SC_BC_SCALE_MAX() {
        return (int)11L;
    }
    public static int _SC_BC_STRING_MAX() {
        return (int)12L;
    }
    public static int _SC_COLL_WEIGHTS_MAX() {
        return (int)13L;
    }
    public static int _SC_EXPR_NEST_MAX() {
        return (int)14L;
    }
    public static int _SC_LINE_MAX() {
        return (int)15L;
    }
    public static int _SC_RE_DUP_MAX() {
        return (int)16L;
    }
    public static int _SC_2_VERSION() {
        return (int)17L;
    }
    public static int _SC_2_C_BIND() {
        return (int)18L;
    }
    public static int _SC_2_C_DEV() {
        return (int)19L;
    }
    public static int _SC_2_CHAR_TERM() {
        return (int)20L;
    }
    public static int _SC_2_FORT_DEV() {
        return (int)21L;
    }
    public static int _SC_2_FORT_RUN() {
        return (int)22L;
    }
    public static int _SC_2_LOCALEDEF() {
        return (int)23L;
    }
    public static int _SC_2_SW_DEV() {
        return (int)24L;
    }
    public static int _SC_2_UPE() {
        return (int)25L;
    }
    public static int _SC_STREAM_MAX() {
        return (int)26L;
    }
    public static int _SC_TZNAME_MAX() {
        return (int)27L;
    }
    public static int _SC_ASYNCHRONOUS_IO() {
        return (int)28L;
    }
    public static int _SC_PAGESIZE() {
        return (int)29L;
    }
    public static int _SC_MEMLOCK() {
        return (int)30L;
    }
    public static int _SC_MEMLOCK_RANGE() {
        return (int)31L;
    }
    public static int _SC_MEMORY_PROTECTION() {
        return (int)32L;
    }
    public static int _SC_MESSAGE_PASSING() {
        return (int)33L;
    }
    public static int _SC_PRIORITIZED_IO() {
        return (int)34L;
    }
    public static int _SC_PRIORITY_SCHEDULING() {
        return (int)35L;
    }
    public static int _SC_REALTIME_SIGNALS() {
        return (int)36L;
    }
    public static int _SC_SEMAPHORES() {
        return (int)37L;
    }
    public static int _SC_FSYNC() {
        return (int)38L;
    }
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return (int)39L;
    }
    public static int _SC_SYNCHRONIZED_IO() {
        return (int)40L;
    }
    public static int _SC_TIMERS() {
        return (int)41L;
    }
    public static int _SC_AIO_LISTIO_MAX() {
        return (int)42L;
    }
    public static int _SC_AIO_MAX() {
        return (int)43L;
    }
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return (int)44L;
    }
    public static int _SC_DELAYTIMER_MAX() {
        return (int)45L;
    }
    public static int _SC_MQ_OPEN_MAX() {
        return (int)46L;
    }
    public static int _SC_MAPPED_FILES() {
        return (int)47L;
    }
    public static int _SC_RTSIG_MAX() {
        return (int)48L;
    }
    public static int _SC_SEM_NSEMS_MAX() {
        return (int)49L;
    }
    public static int _SC_SEM_VALUE_MAX() {
        return (int)50L;
    }
    public static int _SC_SIGQUEUE_MAX() {
        return (int)51L;
    }
    public static int _SC_TIMER_MAX() {
        return (int)52L;
    }
    public static int _SC_NPROCESSORS_CONF() {
        return (int)57L;
    }
    public static int _SC_NPROCESSORS_ONLN() {
        return (int)58L;
    }
    public static int _SC_2_PBS() {
        return (int)59L;
    }
    public static int _SC_2_PBS_ACCOUNTING() {
        return (int)60L;
    }
    public static int _SC_2_PBS_CHECKPOINT() {
        return (int)61L;
    }
    public static int _SC_2_PBS_LOCATE() {
        return (int)62L;
    }
    public static int _SC_2_PBS_MESSAGE() {
        return (int)63L;
    }
    public static int _SC_2_PBS_TRACK() {
        return (int)64L;
    }
    public static int _SC_ADVISORY_INFO() {
        return (int)65L;
    }
    public static int _SC_BARRIERS() {
        return (int)66L;
    }
    public static int _SC_CLOCK_SELECTION() {
        return (int)67L;
    }
    public static int _SC_CPUTIME() {
        return (int)68L;
    }
    public static int _SC_FILE_LOCKING() {
        return (int)69L;
    }
    public static int _SC_GETGR_R_SIZE_MAX() {
        return (int)70L;
    }
    public static int _SC_GETPW_R_SIZE_MAX() {
        return (int)71L;
    }
    public static int _SC_HOST_NAME_MAX() {
        return (int)72L;
    }
    public static int _SC_LOGIN_NAME_MAX() {
        return (int)73L;
    }
    public static int _SC_MONOTONIC_CLOCK() {
        return (int)74L;
    }
    public static int _SC_MQ_PRIO_MAX() {
        return (int)75L;
    }
    public static int _SC_READER_WRITER_LOCKS() {
        return (int)76L;
    }
    public static int _SC_REGEXP() {
        return (int)77L;
    }
    public static int _SC_SHELL() {
        return (int)78L;
    }
    public static int _SC_SPAWN() {
        return (int)79L;
    }
    public static int _SC_SPIN_LOCKS() {
        return (int)80L;
    }
    public static int _SC_SPORADIC_SERVER() {
        return (int)81L;
    }
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return (int)82L;
    }
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return (int)83L;
    }
    public static int _SC_THREAD_CPUTIME() {
        return (int)84L;
    }
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)85L;
    }
    public static int _SC_THREAD_KEYS_MAX() {
        return (int)86L;
    }
    public static int _SC_THREAD_PRIO_INHERIT() {
        return (int)87L;
    }
    public static int _SC_THREAD_PRIO_PROTECT() {
        return (int)88L;
    }
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return (int)89L;
    }
    public static int _SC_THREAD_PROCESS_SHARED() {
        return (int)90L;
    }
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return (int)91L;
    }
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return (int)92L;
    }
    public static int _SC_THREAD_STACK_MIN() {
        return (int)93L;
    }
    public static int _SC_THREAD_THREADS_MAX() {
        return (int)94L;
    }
    public static int _SC_TIMEOUTS() {
        return (int)95L;
    }
    public static int _SC_THREADS() {
        return (int)96L;
    }
    public static int _SC_TRACE() {
        return (int)97L;
    }
    public static int _SC_TRACE_EVENT_FILTER() {
        return (int)98L;
    }
    public static int _SC_TRACE_INHERIT() {
        return (int)99L;
    }
    public static int _SC_TRACE_LOG() {
        return (int)100L;
    }
    public static int _SC_TTY_NAME_MAX() {
        return (int)101L;
    }
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return (int)102L;
    }
    public static int _SC_V6_ILP32_OFF32() {
        return (int)103L;
    }
    public static int _SC_V6_ILP32_OFFBIG() {
        return (int)104L;
    }
    public static int _SC_V6_LP64_OFF64() {
        return (int)105L;
    }
    public static int _SC_V6_LPBIG_OFFBIG() {
        return (int)106L;
    }
    public static int _SC_IPV6() {
        return (int)118L;
    }
    public static int _SC_RAW_SOCKETS() {
        return (int)119L;
    }
    public static int _SC_SYMLOOP_MAX() {
        return (int)120L;
    }
    public static int _SC_ATEXIT_MAX() {
        return (int)107L;
    }
    public static int _SC_IOV_MAX() {
        return (int)56L;
    }
    public static int _SC_XOPEN_CRYPT() {
        return (int)108L;
    }
    public static int _SC_XOPEN_ENH_I18N() {
        return (int)109L;
    }
    public static int _SC_XOPEN_LEGACY() {
        return (int)110L;
    }
    public static int _SC_XOPEN_REALTIME() {
        return (int)111L;
    }
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return (int)112L;
    }
    public static int _SC_XOPEN_SHM() {
        return (int)113L;
    }
    public static int _SC_XOPEN_STREAMS() {
        return (int)114L;
    }
    public static int _SC_XOPEN_UNIX() {
        return (int)115L;
    }
    public static int _SC_XOPEN_VERSION() {
        return (int)116L;
    }
    public static int _SC_XOPEN_XCU_VERSION() {
        return (int)121L;
    }
    public static int _SC_XBS5_ILP32_OFF32() {
        return (int)122L;
    }
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return (int)123L;
    }
    public static int _SC_XBS5_LP64_OFF64() {
        return (int)124L;
    }
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return (int)125L;
    }
    public static int _SC_SS_REPL_MAX() {
        return (int)126L;
    }
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return (int)127L;
    }
    public static int _SC_TRACE_NAME_MAX() {
        return (int)128L;
    }
    public static int _SC_TRACE_SYS_MAX() {
        return (int)129L;
    }
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return (int)130L;
    }
    public static int _SC_PASS_MAX() {
        return (int)131L;
    }
    public static int _SC_PHYS_PAGES() {
        return (int)200L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return (int)2L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return (int)3L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return (int)4L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return (int)5L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return (int)6L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return (int)7L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return (int)8L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return (int)9L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return (int)10L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return (int)11L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return (int)12L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return (int)13L;
    }
    public static int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)14L;
    }
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return (int)20L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return (int)21L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return (int)22L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return (int)23L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return (int)24L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return (int)25L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return (int)26L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return (int)27L;
    }
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return (int)28L;
    }
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return (int)29L;
    }
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return (int)30L;
    }
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return (int)31L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return (int)32L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return (int)33L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return (int)34L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)35L;
    }
    public static int _CS_DARWIN_USER_DIR() {
        return (int)65536L;
    }
    public static int _CS_DARWIN_USER_TEMP_DIR() {
        return (int)65537L;
    }
    public static int _CS_DARWIN_USER_CACHE_DIR() {
        return (int)65538L;
    }
    public static int F_ULOCK() {
        return (int)0L;
    }
    public static int F_LOCK() {
        return (int)1L;
    }
    public static int F_TLOCK() {
        return (int)2L;
    }
    public static int F_TEST() {
        return (int)3L;
    }
    public static int SYNC_VOLUME_FULLSYNC() {
        return (int)1L;
    }
    public static int SYNC_VOLUME_WAIT() {
        return (int)2L;
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt __darwin_nl_item = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wctrans_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.renameat$MH,"renameat");
    }
    public static int renameat ( int x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renamex_np$MH() {
        return RuntimeHelper.requireNonNull(constants$0.renamex_np$MH,"renamex_np");
    }
    public static int renamex_np ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = renamex_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$0.renameatx_np$MH,"renameatx_np");
    }
    public static int renameatx_np ( int x0,  Addressable x1,  int x2,  Addressable x3,  int x4) {
        var mh$ = renameatx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong fpos_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MemoryLayout __stdinp$LAYOUT() {
        return constants$0.__stdinp$LAYOUT;
    }
    public static VarHandle __stdinp$VH() {
        return constants$0.__stdinp$VH;
    }
    public static MemorySegment __stdinp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__stdinp$SEGMENT,"__stdinp");
    }
    public static MemoryAddress __stdinp$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.__stdinp$VH.get(RuntimeHelper.requireNonNull(constants$0.__stdinp$SEGMENT, "__stdinp"));
    }
    public static void __stdinp$set( MemoryAddress x) {
        constants$0.__stdinp$VH.set(RuntimeHelper.requireNonNull(constants$0.__stdinp$SEGMENT, "__stdinp"), x);
    }
    public static MemoryLayout __stdoutp$LAYOUT() {
        return constants$0.__stdoutp$LAYOUT;
    }
    public static VarHandle __stdoutp$VH() {
        return constants$0.__stdoutp$VH;
    }
    public static MemorySegment __stdoutp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__stdoutp$SEGMENT,"__stdoutp");
    }
    public static MemoryAddress __stdoutp$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.__stdoutp$VH.get(RuntimeHelper.requireNonNull(constants$0.__stdoutp$SEGMENT, "__stdoutp"));
    }
    public static void __stdoutp$set( MemoryAddress x) {
        constants$0.__stdoutp$VH.set(RuntimeHelper.requireNonNull(constants$0.__stdoutp$SEGMENT, "__stdoutp"), x);
    }
    public static MemoryLayout __stderrp$LAYOUT() {
        return constants$0.__stderrp$LAYOUT;
    }
    public static VarHandle __stderrp$VH() {
        return constants$0.__stderrp$VH;
    }
    public static MemorySegment __stderrp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__stderrp$SEGMENT,"__stderrp");
    }
    public static MemoryAddress __stderrp$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.__stderrp$VH.get(RuntimeHelper.requireNonNull(constants$0.__stderrp$SEGMENT, "__stderrp"));
    }
    public static void __stderrp$set( MemoryAddress x) {
        constants$0.__stderrp$VH.set(RuntimeHelper.requireNonNull(constants$0.__stderrp$SEGMENT, "__stderrp"), x);
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$1.clearerr$MH,"clearerr");
    }
    public static void clearerr ( Addressable x0) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fclose$MH,"fclose");
    }
    public static int fclose ( Addressable x0) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$1.feof$MH,"feof");
    }
    public static int feof ( Addressable x0) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$1.ferror$MH,"ferror");
    }
    public static int ferror ( Addressable x0) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fflush$MH,"fflush");
    }
    public static int fflush ( Addressable x0) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fgetc$MH,"fgetc");
    }
    public static int fgetc ( Addressable x0) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fgetpos$MH,"fgetpos");
    }
    public static int fgetpos ( Addressable x0,  Addressable x1) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fgets$MH,"fgets");
    }
    public static MemoryAddress fgets ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fopen$MH,"fopen");
    }
    public static MemoryAddress fopen ( Addressable __filename,  Addressable __mode) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__filename, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fprintf$MH,"fprintf");
    }
    public static int fprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fputc$MH,"fputc");
    }
    public static int fputc ( int x0,  Addressable x1) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fputs$MH,"fputs");
    }
    public static int fputs ( Addressable x0,  Addressable x1) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fread$MH,"fread");
    }
    public static long fread ( Addressable __ptr,  long __size,  long __nitems,  Addressable __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.freopen$MH,"freopen");
    }
    public static MemoryAddress freopen ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fscanf$MH,"fscanf");
    }
    public static int fscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fseek$MH,"fseek");
    }
    public static int fseek ( Addressable x0,  long x1,  int x2) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fsetpos$MH,"fsetpos");
    }
    public static int fsetpos ( Addressable x0,  Addressable x1) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$3.ftell$MH,"ftell");
    }
    public static long ftell ( Addressable x0) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fwrite$MH,"fwrite");
    }
    public static long fwrite ( Addressable __ptr,  long __size,  long __nitems,  Addressable __stream) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.getc$MH,"getc");
    }
    public static int getc ( Addressable x0) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$4.getchar$MH,"getchar");
    }
    public static int getchar () {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gets$MH() {
        return RuntimeHelper.requireNonNull(constants$4.gets$MH,"gets");
    }
    public static MemoryAddress gets ( Addressable x0) {
        var mh$ = gets$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$4.perror$MH,"perror");
    }
    public static void perror ( Addressable x0) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.printf$MH,"printf");
    }
    public static int printf ( Addressable x0, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$5.putc$MH,"putc");
    }
    public static int putc ( int x0,  Addressable x1) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$5.putchar$MH,"putchar");
    }
    public static int putchar ( int x0) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$5.puts$MH,"puts");
    }
    public static int puts ( Addressable x0) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$5.remove$MH,"remove");
    }
    public static int remove ( Addressable x0) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$5.rename$MH,"rename");
    }
    public static int rename ( Addressable __old,  Addressable __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$5.rewind$MH,"rewind");
    }
    public static void rewind ( Addressable x0) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.scanf$MH,"scanf");
    }
    public static int scanf ( Addressable x0, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setbuf$MH,"setbuf");
    }
    public static void setbuf ( Addressable x0,  Addressable x1) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setvbuf$MH,"setvbuf");
    }
    public static int setvbuf ( Addressable x0,  Addressable x1,  int x2,  long x3) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.sprintf$MH,"sprintf");
    }
    public static int sprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.sscanf$MH,"sscanf");
    }
    public static int sscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$6.tmpfile$MH,"tmpfile");
    }
    public static MemoryAddress tmpfile () {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$7.tmpnam$MH,"tmpnam");
    }
    public static MemoryAddress tmpnam ( Addressable x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.ungetc$MH,"ungetc");
    }
    public static int ungetc ( int x0,  Addressable x1) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vfprintf$MH,"vfprintf");
    }
    public static int vfprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vprintf$MH,"vprintf");
    }
    public static int vprintf ( Addressable x0,  Addressable x1) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vsprintf$MH,"vsprintf");
    }
    public static int vsprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$7.ctermid$MH,"ctermid");
    }
    public static MemoryAddress ctermid ( Addressable x0) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fdopen$MH,"fdopen");
    }
    public static MemoryAddress fdopen ( int x0,  Addressable x1) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fileno$MH,"fileno");
    }
    public static int fileno ( Addressable x0) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$8.pclose$MH,"pclose");
    }
    public static int pclose ( Addressable x0) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$8.popen$MH,"popen");
    }
    public static MemoryAddress popen ( Addressable x0,  Addressable x1) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __srget$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__srget$MH,"__srget");
    }
    public static int __srget ( Addressable x0) {
        var mh$ = __srget$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __svfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__svfscanf$MH,"__svfscanf");
    }
    public static int __svfscanf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = __svfscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__swbuf$MH,"__swbuf");
    }
    public static int __swbuf ( int x0,  Addressable x1) {
        var mh$ = __swbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sputc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__sputc$MH,"__sputc");
    }
    public static int __sputc ( int _c,  Addressable _p) {
        var mh$ = __sputc$MH();
        try {
            return (int)mh$.invokeExact(_c, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$9.flockfile$MH,"flockfile");
    }
    public static void flockfile ( Addressable x0) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ftrylockfile$MH,"ftrylockfile");
    }
    public static int ftrylockfile ( Addressable x0) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$9.funlockfile$MH,"funlockfile");
    }
    public static void funlockfile ( Addressable x0) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$9.getc_unlocked$MH,"getc_unlocked");
    }
    public static int getc_unlocked ( Addressable x0) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getchar_unlocked$MH,"getchar_unlocked");
    }
    public static int getchar_unlocked () {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putc_unlocked$MH,"putc_unlocked");
    }
    public static int putc_unlocked ( int x0,  Addressable x1) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putchar_unlocked$MH,"putchar_unlocked");
    }
    public static int putchar_unlocked ( int x0) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getw$MH,"getw");
    }
    public static int getw ( Addressable x0) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putw$MH,"putw");
    }
    public static int putw ( int x0,  Addressable x1) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$10.tempnam$MH,"tempnam");
    }
    public static MemoryAddress tempnam ( Addressable __dir,  Addressable __prefix) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dir, __prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fseeko$MH,"fseeko");
    }
    public static int fseeko ( Addressable __stream,  long __offset,  int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ftello$MH,"ftello");
    }
    public static long ftello ( Addressable __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.snprintf$MH,"snprintf");
    }
    public static int snprintf ( Addressable __str,  long __size,  Addressable __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.vfscanf$MH,"vfscanf");
    }
    public static int vfscanf ( Addressable __stream,  Addressable __format,  Addressable x2) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.vscanf$MH,"vscanf");
    }
    public static int vscanf ( Addressable __format,  Addressable x1) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.vsnprintf$MH,"vsnprintf");
    }
    public static int vsnprintf ( Addressable __str,  long __size,  Addressable __format,  Addressable x3) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vsscanf$MH,"vsscanf");
    }
    public static int vsscanf ( Addressable __str,  Addressable __format,  Addressable x2) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__str, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.dprintf$MH,"dprintf");
    }
    public static int dprintf ( int x0,  Addressable x1, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vdprintf$MH,"vdprintf");
    }
    public static int vdprintf ( int x0,  Addressable x1,  Addressable x2) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getdelim$MH,"getdelim");
    }
    public static long getdelim ( Addressable __linep,  Addressable __linecapp,  int __delimiter,  Addressable __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__linep, __linecapp, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getline$MH,"getline");
    }
    public static long getline ( Addressable __linep,  Addressable __linecapp,  Addressable __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__linep, __linecapp, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fmemopen$MH,"fmemopen");
    }
    public static MemoryAddress fmemopen ( Addressable __buf,  long __size,  Addressable __mode) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__buf, __size, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$13.open_memstream$MH,"open_memstream");
    }
    public static MemoryAddress open_memstream ( Addressable __bufp,  Addressable __sizep) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__bufp, __sizep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout sys_nerr$LAYOUT() {
        return constants$13.sys_nerr$LAYOUT;
    }
    public static VarHandle sys_nerr$VH() {
        return constants$13.sys_nerr$VH;
    }
    public static MemorySegment sys_nerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$13.sys_nerr$SEGMENT,"sys_nerr");
    }
    public static int sys_nerr$get() {
        return (int) constants$13.sys_nerr$VH.get(RuntimeHelper.requireNonNull(constants$13.sys_nerr$SEGMENT, "sys_nerr"));
    }
    public static void sys_nerr$set( int x) {
        constants$13.sys_nerr$VH.set(RuntimeHelper.requireNonNull(constants$13.sys_nerr$SEGMENT, "sys_nerr"), x);
    }
    public static MethodHandle asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.asprintf$MH,"asprintf");
    }
    public static int asprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = asprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid_r$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ctermid_r$MH,"ctermid_r");
    }
    public static MemoryAddress ctermid_r ( Addressable x0) {
        var mh$ = ctermid_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetln$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fgetln$MH,"fgetln");
    }
    public static MemoryAddress fgetln ( Addressable x0,  Addressable x1) {
        var mh$ = fgetln$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmtcheck$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fmtcheck$MH,"fmtcheck");
    }
    public static MemoryAddress fmtcheck ( Addressable x0,  Addressable x1) {
        var mh$ = fmtcheck$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpurge$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fpurge$MH,"fpurge");
    }
    public static int fpurge ( Addressable x0) {
        var mh$ = fpurge$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$14.setbuffer$MH,"setbuffer");
    }
    public static void setbuffer ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.setlinebuf$MH,"setlinebuf");
    }
    public static int setlinebuf ( Addressable x0) {
        var mh$ = setlinebuf$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.vasprintf$MH,"vasprintf");
    }
    public static int vasprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vasprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funopen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.funopen$MH,"funopen");
    }
    public static MemoryAddress funopen ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = funopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__sprintf_chk$MH,"__sprintf_chk");
    }
    public static int __sprintf_chk ( Addressable x0,  int x1,  long x2,  Addressable x3, Object... x4) {
        var mh$ = __sprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __snprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__snprintf_chk$MH,"__snprintf_chk");
    }
    public static int __snprintf_chk ( Addressable x0,  long x1,  int x2,  long x3,  Addressable x4, Object... x5) {
        var mh$ = __snprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__vsprintf_chk$MH,"__vsprintf_chk");
    }
    public static int __vsprintf_chk ( Addressable x0,  int x1,  long x2,  Addressable x3,  Addressable x4) {
        var mh$ = __vsprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsnprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__vsnprintf_chk$MH,"__vsnprintf_chk");
    }
    public static int __vsnprintf_chk ( Addressable x0,  long x1,  int x2,  long x3,  Addressable x4,  Addressable x5) {
        var mh$ = __vsnprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MemoryLayout getdate_err$LAYOUT() {
        return constants$17.getdate_err$LAYOUT;
    }
    public static VarHandle getdate_err$VH() {
        return constants$17.getdate_err$VH;
    }
    public static MemorySegment getdate_err$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$17.getdate_err$SEGMENT,"getdate_err");
    }
    public static int getdate_err$get() {
        return (int) constants$17.getdate_err$VH.get(RuntimeHelper.requireNonNull(constants$17.getdate_err$SEGMENT, "getdate_err"));
    }
    public static void getdate_err$set( int x) {
        constants$17.getdate_err$VH.set(RuntimeHelper.requireNonNull(constants$17.getdate_err$SEGMENT, "getdate_err"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$17.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$17.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$17.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$17.timezone$VH.get(RuntimeHelper.requireNonNull(constants$17.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$17.timezone$VH.set(RuntimeHelper.requireNonNull(constants$17.timezone$SEGMENT, "timezone"), x);
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$17.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$17.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$17.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$17.daylight$VH.get(RuntimeHelper.requireNonNull(constants$17.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$17.daylight$VH.set(RuntimeHelper.requireNonNull(constants$17.daylight$SEGMENT, "daylight"), x);
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$17.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable x0) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$17.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$18.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable x0) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$18.difftime$MH,"difftime");
    }
    public static double difftime ( long x0,  long x1) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdate$MH() {
        return RuntimeHelper.requireNonNull(constants$18.getdate$MH,"getdate");
    }
    public static MemoryAddress getdate ( Addressable x0) {
        var mh$ = getdate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$18.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable x0) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$18.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable x0) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$18.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable x0) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$19.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strptime$MH() {
        return RuntimeHelper.requireNonNull(constants$19.strptime$MH,"strptime");
    }
    public static MemoryAddress strptime ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = strptime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$19.time$MH,"time");
    }
    public static long time ( Addressable x0) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$19.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$19.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable x0,  Addressable x1) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$19.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable x0,  Addressable x1) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable x0,  Addressable x1) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable x0,  Addressable x1) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix2time$MH() {
        return RuntimeHelper.requireNonNull(constants$20.posix2time$MH,"posix2time");
    }
    public static long posix2time ( long x0) {
        var mh$ = posix2time$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tzsetwall$MH() {
        return RuntimeHelper.requireNonNull(constants$20.tzsetwall$MH,"tzsetwall");
    }
    public static void tzsetwall () {
        var mh$ = tzsetwall$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time2posix$MH() {
        return RuntimeHelper.requireNonNull(constants$20.time2posix$MH,"time2posix");
    }
    public static long time2posix ( long x0) {
        var mh$ = time2posix$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$20.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable x0) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$21.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable x0) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$21.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __rqtp,  Addressable __rmtp) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__rqtp, __rmtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int _CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int _CLOCK_MONOTONIC() {
        return (int)6L;
    }
    public static int _CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int _CLOCK_MONOTONIC_RAW_APPROX() {
        return (int)5L;
    }
    public static int _CLOCK_UPTIME_RAW() {
        return (int)8L;
    }
    public static int _CLOCK_UPTIME_RAW_APPROX() {
        return (int)9L;
    }
    public static int _CLOCK_PROCESS_CPUTIME_ID() {
        return (int)12L;
    }
    public static int _CLOCK_THREAD_CPUTIME_ID() {
        return (int)16L;
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$21.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$21.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime_nsec_np$MH() {
        return RuntimeHelper.requireNonNull(constants$21.clock_gettime_nsec_np$MH,"clock_gettime_nsec_np");
    }
    public static long clock_gettime_nsec_np ( int __clock_id) {
        var mh$ = clock_gettime_nsec_np$MH();
        try {
            return (long)mh$.invokeExact(__clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$21.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$22.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable ts,  int base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(ts, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt16$MH() {
        return RuntimeHelper.requireNonNull(constants$22._OSSwapInt16$MH,"_OSSwapInt16");
    }
    public static short _OSSwapInt16 ( short _data) {
        var mh$ = _OSSwapInt16$MH();
        try {
            return (short)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt32$MH() {
        return RuntimeHelper.requireNonNull(constants$22._OSSwapInt32$MH,"_OSSwapInt32");
    }
    public static int _OSSwapInt32 ( int _data) {
        var mh$ = _OSSwapInt32$MH();
        try {
            return (int)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _OSSwapInt64$MH() {
        return RuntimeHelper.requireNonNull(constants$22._OSSwapInt64$MH,"_OSSwapInt64");
    }
    public static long _OSSwapInt64 ( long _data) {
        var mh$ = _OSSwapInt64$MH();
        try {
            return (long)mh$.invokeExact(_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress qaddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt segsz_t = Constants$root.C_INT$LAYOUT;
    public static OfInt swblk_t = Constants$root.C_INT$LAYOUT;
    public static OfInt suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfInt errno_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle __darwin_check_fd_set_overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__darwin_check_fd_set_overflow$MH,"__darwin_check_fd_set_overflow");
    }
    public static int __darwin_check_fd_set_overflow ( int x0,  Addressable x1,  int x2) {
        var mh$ = __darwin_check_fd_set_overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_check_fd_set$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__darwin_check_fd_set$MH,"__darwin_check_fd_set");
    }
    public static int __darwin_check_fd_set ( int _a,  Addressable _b) {
        var mh$ = __darwin_check_fd_set$MH();
        try {
            return (int)mh$.invokeExact(_a, _b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_isset$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__darwin_fd_isset$MH,"__darwin_fd_isset");
    }
    public static int __darwin_fd_isset ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_isset$MH();
        try {
            return (int)mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_set$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__darwin_fd_set$MH,"__darwin_fd_set");
    }
    public static void __darwin_fd_set ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_set$MH();
        try {
            mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_fd_clr$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__darwin_fd_clr$MH,"__darwin_fd_clr");
    }
    public static void __darwin_fd_clr ( int _fd,  Addressable _p) {
        var mh$ = __darwin_fd_clr$MH();
        try {
            mh$.invokeExact(_fd, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt fd_mask = Constants$root.C_INT$LAYOUT;
    public static OfAddress pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle getattrlistbulk$MH() {
        return RuntimeHelper.requireNonNull(constants$23.getattrlistbulk$MH,"getattrlistbulk");
    }
    public static int getattrlistbulk ( int x0,  Addressable x1,  Addressable x2,  long x3,  long x4) {
        var mh$ = getattrlistbulk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getattrlistat$MH() {
        return RuntimeHelper.requireNonNull(constants$23.getattrlistat$MH,"getattrlistat");
    }
    public static int getattrlistat ( int x0,  Addressable x1,  Addressable x2,  Addressable x3,  long x4,  long x5) {
        var mh$ = getattrlistat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setattrlistat$MH() {
        return RuntimeHelper.requireNonNull(constants$23.setattrlistat$MH,"setattrlistat");
    }
    public static int setattrlistat ( int x0,  Addressable x1,  Addressable x2,  Addressable x3,  long x4,  int x5) {
        var mh$ = setattrlistat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle faccessat$MH() {
        return RuntimeHelper.requireNonNull(constants$24.faccessat$MH,"faccessat");
    }
    public static int faccessat ( int x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = faccessat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchownat$MH() {
        return RuntimeHelper.requireNonNull(constants$24.fchownat$MH,"fchownat");
    }
    public static int fchownat ( int x0,  Addressable x1,  int x2,  int x3,  int x4) {
        var mh$ = fchownat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$24.linkat$MH,"linkat");
    }
    public static int linkat ( int x0,  Addressable x1,  int x2,  Addressable x3,  int x4) {
        var mh$ = linkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$24.readlinkat$MH,"readlinkat");
    }
    public static long readlinkat ( int x0,  Addressable x1,  Addressable x2,  long x3) {
        var mh$ = readlinkat$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$24.symlinkat$MH,"symlinkat");
    }
    public static int symlinkat ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = symlinkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$24.unlinkat$MH,"unlinkat");
    }
    public static int unlinkat ( int x0,  Addressable x1,  int x2) {
        var mh$ = unlinkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$25._exit$MH,"_exit");
    }
    public static void _exit ( int x0) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle access$MH() {
        return RuntimeHelper.requireNonNull(constants$25.access$MH,"access");
    }
    public static int access ( Addressable x0,  int x1) {
        var mh$ = access$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alarm$MH() {
        return RuntimeHelper.requireNonNull(constants$25.alarm$MH,"alarm");
    }
    public static int alarm ( int x0) {
        var mh$ = alarm$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$25.chdir$MH,"chdir");
    }
    public static int chdir ( Addressable x0) {
        var mh$ = chdir$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chown$MH() {
        return RuntimeHelper.requireNonNull(constants$25.chown$MH,"chown");
    }
    public static int chown ( Addressable x0,  int x1,  int x2) {
        var mh$ = chown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$25.close$MH,"close");
    }
    public static int close ( int x0) {
        var mh$ = close$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup$MH() {
        return RuntimeHelper.requireNonNull(constants$26.dup$MH,"dup");
    }
    public static int dup ( int x0) {
        var mh$ = dup$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup2$MH() {
        return RuntimeHelper.requireNonNull(constants$26.dup2$MH,"dup2");
    }
    public static int dup2 ( int x0,  int x1) {
        var mh$ = dup2$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execl$MH() {
        return RuntimeHelper.requireNonNull(constants$26.execl$MH,"execl");
    }
    public static int execl ( Addressable __path,  Addressable __arg0, Object... x2) {
        var mh$ = execl$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execle$MH() {
        return RuntimeHelper.requireNonNull(constants$26.execle$MH,"execle");
    }
    public static int execle ( Addressable __path,  Addressable __arg0, Object... x2) {
        var mh$ = execle$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execlp$MH() {
        return RuntimeHelper.requireNonNull(constants$26.execlp$MH,"execlp");
    }
    public static int execlp ( Addressable __file,  Addressable __arg0, Object... x2) {
        var mh$ = execlp$MH();
        try {
            return (int)mh$.invokeExact(__file, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execv$MH() {
        return RuntimeHelper.requireNonNull(constants$26.execv$MH,"execv");
    }
    public static int execv ( Addressable __path,  Addressable __argv) {
        var mh$ = execv$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execve$MH() {
        return RuntimeHelper.requireNonNull(constants$27.execve$MH,"execve");
    }
    public static int execve ( Addressable __file,  Addressable __argv,  Addressable __envp) {
        var mh$ = execve$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvp$MH() {
        return RuntimeHelper.requireNonNull(constants$27.execvp$MH,"execvp");
    }
    public static int execvp ( Addressable __file,  Addressable __argv) {
        var mh$ = execvp$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fork$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fork$MH,"fork");
    }
    public static int fork () {
        var mh$ = fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fpathconf$MH,"fpathconf");
    }
    public static long fpathconf ( int x0,  int x1) {
        var mh$ = fpathconf$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getcwd$MH,"getcwd");
    }
    public static MemoryAddress getcwd ( Addressable x0,  long x1) {
        var mh$ = getcwd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getegid$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getegid$MH,"getegid");
    }
    public static int getegid () {
        var mh$ = getegid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle geteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.geteuid$MH,"geteuid");
    }
    public static int geteuid () {
        var mh$ = geteuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.getgid$MH,"getgid");
    }
    public static int getgid () {
        var mh$ = getgid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$28.getgroups$MH,"getgroups");
    }
    public static int getgroups ( int x0,  Addressable x1) {
        var mh$ = getgroups$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$28.getlogin$MH,"getlogin");
    }
    public static MemoryAddress getlogin () {
        var mh$ = getlogin$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$28.getpgrp$MH,"getpgrp");
    }
    public static int getpgrp () {
        var mh$ = getpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.getpid$MH,"getpid");
    }
    public static int getpid () {
        var mh$ = getpid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getppid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getppid$MH,"getppid");
    }
    public static int getppid () {
        var mh$ = getppid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getuid$MH,"getuid");
    }
    public static int getuid () {
        var mh$ = getuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isatty$MH() {
        return RuntimeHelper.requireNonNull(constants$29.isatty$MH,"isatty");
    }
    public static int isatty ( int x0) {
        var mh$ = isatty$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$29.link$MH,"link");
    }
    public static int link ( Addressable x0,  Addressable x1) {
        var mh$ = link$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$29.lseek$MH,"lseek");
    }
    public static long lseek ( int x0,  long x1,  int x2) {
        var mh$ = lseek$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.pathconf$MH,"pathconf");
    }
    public static long pathconf ( Addressable x0,  int x1) {
        var mh$ = pathconf$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pause$MH() {
        return RuntimeHelper.requireNonNull(constants$30.pause$MH,"pause");
    }
    public static int pause () {
        var mh$ = pause$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$30.pipe$MH,"pipe");
    }
    public static int pipe ( Addressable x0) {
        var mh$ = pipe$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$30.read$MH,"read");
    }
    public static long read ( int x0,  Addressable x1,  long x2) {
        var mh$ = read$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$30.rmdir$MH,"rmdir");
    }
    public static int rmdir ( Addressable x0) {
        var mh$ = rmdir$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.setgid$MH,"setgid");
    }
    public static int setgid ( int x0) {
        var mh$ = setgid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.setpgid$MH,"setpgid");
    }
    public static int setpgid ( int x0,  int x1) {
        var mh$ = setpgid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.setsid$MH,"setsid");
    }
    public static int setsid () {
        var mh$ = setsid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setuid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.setuid$MH,"setuid");
    }
    public static int setuid ( int x0) {
        var mh$ = setuid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$31.sleep$MH,"sleep");
    }
    public static int sleep ( int x0) {
        var mh$ = sleep$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysconf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.sysconf$MH,"sysconf");
    }
    public static long sysconf ( int x0) {
        var mh$ = sysconf$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcgetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$31.tcgetpgrp$MH,"tcgetpgrp");
    }
    public static int tcgetpgrp ( int x0) {
        var mh$ = tcgetpgrp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcsetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$31.tcsetpgrp$MH,"tcsetpgrp");
    }
    public static int tcsetpgrp ( int x0,  int x1) {
        var mh$ = tcsetpgrp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname$MH() {
        return RuntimeHelper.requireNonNull(constants$32.ttyname$MH,"ttyname");
    }
    public static MemoryAddress ttyname ( int x0) {
        var mh$ = ttyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$32.ttyname_r$MH,"ttyname_r");
    }
    public static int ttyname_r ( int x0,  Addressable x1,  long x2) {
        var mh$ = ttyname_r$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$32.unlink$MH,"unlink");
    }
    public static int unlink ( Addressable x0) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$32.write$MH,"write");
    }
    public static long write ( int __fd,  Addressable __buf,  long __nbyte) {
        var mh$ = write$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbyte);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle confstr$MH() {
        return RuntimeHelper.requireNonNull(constants$32.confstr$MH,"confstr");
    }
    public static long confstr ( int x0,  Addressable x1,  long x2) {
        var mh$ = confstr$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getopt$MH() {
        return RuntimeHelper.requireNonNull(constants$32.getopt$MH,"getopt");
    }
    public static int getopt ( int x0,  Addressable x1,  Addressable x2) {
        var mh$ = getopt$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optarg$LAYOUT() {
        return constants$33.optarg$LAYOUT;
    }
    public static VarHandle optarg$VH() {
        return constants$33.optarg$VH;
    }
    public static MemorySegment optarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.optarg$SEGMENT,"optarg");
    }
    public static MemoryAddress optarg$get() {
        return (java.lang.foreign.MemoryAddress) constants$33.optarg$VH.get(RuntimeHelper.requireNonNull(constants$33.optarg$SEGMENT, "optarg"));
    }
    public static void optarg$set( MemoryAddress x) {
        constants$33.optarg$VH.set(RuntimeHelper.requireNonNull(constants$33.optarg$SEGMENT, "optarg"), x);
    }
    public static MemoryLayout optind$LAYOUT() {
        return constants$33.optind$LAYOUT;
    }
    public static VarHandle optind$VH() {
        return constants$33.optind$VH;
    }
    public static MemorySegment optind$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.optind$SEGMENT,"optind");
    }
    public static int optind$get() {
        return (int) constants$33.optind$VH.get(RuntimeHelper.requireNonNull(constants$33.optind$SEGMENT, "optind"));
    }
    public static void optind$set( int x) {
        constants$33.optind$VH.set(RuntimeHelper.requireNonNull(constants$33.optind$SEGMENT, "optind"), x);
    }
    public static MemoryLayout opterr$LAYOUT() {
        return constants$33.opterr$LAYOUT;
    }
    public static VarHandle opterr$VH() {
        return constants$33.opterr$VH;
    }
    public static MemorySegment opterr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.opterr$SEGMENT,"opterr");
    }
    public static int opterr$get() {
        return (int) constants$33.opterr$VH.get(RuntimeHelper.requireNonNull(constants$33.opterr$SEGMENT, "opterr"));
    }
    public static void opterr$set( int x) {
        constants$33.opterr$VH.set(RuntimeHelper.requireNonNull(constants$33.opterr$SEGMENT, "opterr"), x);
    }
    public static MemoryLayout optopt$LAYOUT() {
        return constants$33.optopt$LAYOUT;
    }
    public static VarHandle optopt$VH() {
        return constants$33.optopt$VH;
    }
    public static MemorySegment optopt$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$33.optopt$SEGMENT,"optopt");
    }
    public static int optopt$get() {
        return (int) constants$33.optopt$VH.get(RuntimeHelper.requireNonNull(constants$33.optopt$SEGMENT, "optopt"));
    }
    public static void optopt$set( int x) {
        constants$33.optopt$VH.set(RuntimeHelper.requireNonNull(constants$33.optopt$SEGMENT, "optopt"), x);
    }
    public static MethodHandle brk$MH() {
        return RuntimeHelper.requireNonNull(constants$33.brk$MH,"brk");
    }
    public static MemoryAddress brk ( Addressable x0) {
        var mh$ = brk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chroot$MH() {
        return RuntimeHelper.requireNonNull(constants$33.chroot$MH,"chroot");
    }
    public static int chroot ( Addressable x0) {
        var mh$ = chroot$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle crypt$MH() {
        return RuntimeHelper.requireNonNull(constants$34.crypt$MH,"crypt");
    }
    public static MemoryAddress crypt ( Addressable x0,  Addressable x1) {
        var mh$ = crypt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle encrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$34.encrypt$MH,"encrypt");
    }
    public static void encrypt ( Addressable x0,  int x1) {
        var mh$ = encrypt$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchdir$MH() {
        return RuntimeHelper.requireNonNull(constants$34.fchdir$MH,"fchdir");
    }
    public static int fchdir ( int x0) {
        var mh$ = fchdir$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$34.gethostid$MH,"gethostid");
    }
    public static long gethostid () {
        var mh$ = gethostid$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$34.getpgid$MH,"getpgid");
    }
    public static int getpgid ( int x0) {
        var mh$ = getpgid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsid$MH() {
        return RuntimeHelper.requireNonNull(constants$34.getsid$MH,"getsid");
    }
    public static int getsid ( int x0) {
        var mh$ = getsid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdtablesize$MH() {
        return RuntimeHelper.requireNonNull(constants$35.getdtablesize$MH,"getdtablesize");
    }
    public static int getdtablesize () {
        var mh$ = getdtablesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpagesize$MH() {
        return RuntimeHelper.requireNonNull(constants$35.getpagesize$MH,"getpagesize");
    }
    public static int getpagesize () {
        var mh$ = getpagesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpass$MH() {
        return RuntimeHelper.requireNonNull(constants$35.getpass$MH,"getpass");
    }
    public static MemoryAddress getpass ( Addressable x0) {
        var mh$ = getpass$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwd$MH() {
        return RuntimeHelper.requireNonNull(constants$35.getwd$MH,"getwd");
    }
    public static MemoryAddress getwd ( Addressable x0) {
        var mh$ = getwd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchown$MH() {
        return RuntimeHelper.requireNonNull(constants$35.lchown$MH,"lchown");
    }
    public static int lchown ( Addressable x0,  int x1,  int x2) {
        var mh$ = lchown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.lockf$MH,"lockf");
    }
    public static int lockf ( int x0,  int x1,  long x2) {
        var mh$ = lockf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nice$MH() {
        return RuntimeHelper.requireNonNull(constants$36.nice$MH,"nice");
    }
    public static int nice ( int x0) {
        var mh$ = nice$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread$MH() {
        return RuntimeHelper.requireNonNull(constants$36.pread$MH,"pread");
    }
    public static long pread ( int __fd,  Addressable __buf,  long __nbyte,  long __offset) {
        var mh$ = pread$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbyte, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$36.pwrite$MH,"pwrite");
    }
    public static long pwrite ( int __fd,  Addressable __buf,  long __nbyte,  long __offset) {
        var mh$ = pwrite$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbyte, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$36.sbrk$MH,"sbrk");
    }
    public static MemoryAddress sbrk ( int x0) {
        var mh$ = sbrk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$36.setpgrp$MH,"setpgrp");
    }
    public static int setpgrp () {
        var mh$ = setpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setregid$MH() {
        return RuntimeHelper.requireNonNull(constants$36.setregid$MH,"setregid");
    }
    public static int setregid ( int x0,  int x1) {
        var mh$ = setregid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setreuid$MH() {
        return RuntimeHelper.requireNonNull(constants$37.setreuid$MH,"setreuid");
    }
    public static int setreuid ( int x0,  int x1) {
        var mh$ = setreuid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swab$MH() {
        return RuntimeHelper.requireNonNull(constants$37.swab$MH,"swab");
    }
    public static void swab ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = swab$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync$MH() {
        return RuntimeHelper.requireNonNull(constants$37.sync$MH,"sync");
    }
    public static void sync () {
        var mh$ = sync$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$37.truncate$MH,"truncate");
    }
    public static int truncate ( Addressable x0,  long x1) {
        var mh$ = truncate$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ualarm$MH() {
        return RuntimeHelper.requireNonNull(constants$37.ualarm$MH,"ualarm");
    }
    public static int ualarm ( int x0,  int x1) {
        var mh$ = ualarm$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$37.usleep$MH,"usleep");
    }
    public static int usleep ( int x0) {
        var mh$ = usleep$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfork$MH() {
        return RuntimeHelper.requireNonNull(constants$38.vfork$MH,"vfork");
    }
    public static int vfork () {
        var mh$ = vfork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fsync$MH,"fsync");
    }
    public static int fsync ( int x0) {
        var mh$ = fsync$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$38.ftruncate$MH,"ftruncate");
    }
    public static int ftruncate ( int x0,  long x1) {
        var mh$ = ftruncate$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.getlogin_r$MH,"getlogin_r");
    }
    public static int getlogin_r ( Addressable x0,  long x1) {
        var mh$ = getlogin_r$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchown$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fchown$MH,"fchown");
    }
    public static int fchown ( int x0,  int x1,  int x2) {
        var mh$ = fchown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$38.gethostname$MH,"gethostname");
    }
    public static int gethostname ( Addressable x0,  long x1) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$39.readlink$MH,"readlink");
    }
    public static long readlink ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = readlink$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setegid$MH() {
        return RuntimeHelper.requireNonNull(constants$39.setegid$MH,"setegid");
    }
    public static int setegid ( int x0) {
        var mh$ = setegid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$39.seteuid$MH,"seteuid");
    }
    public static int seteuid ( int x0) {
        var mh$ = seteuid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$39.symlink$MH,"symlink");
    }
    public static int symlink ( Addressable x0,  Addressable x1) {
        var mh$ = symlink$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$39.pselect$MH,"pselect");
    }
    public static int pselect ( int x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$39.select$MH,"select");
    }
    public static int select ( int x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$40._Exit$MH,"_Exit");
    }
    public static void _Exit ( int x0) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle accessx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$40.accessx_np$MH,"accessx_np");
    }
    public static int accessx_np ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = accessx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acct$MH() {
        return RuntimeHelper.requireNonNull(constants$40.acct$MH,"acct");
    }
    public static int acct ( Addressable x0) {
        var mh$ = acct$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle add_profil$MH() {
        return RuntimeHelper.requireNonNull(constants$40.add_profil$MH,"add_profil");
    }
    public static int add_profil ( Addressable x0,  long x1,  long x2,  int x3) {
        var mh$ = add_profil$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$40.endusershell$MH,"endusershell");
    }
    public static void endusershell () {
        var mh$ = endusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvP$MH() {
        return RuntimeHelper.requireNonNull(constants$40.execvP$MH,"execvP");
    }
    public static int execvP ( Addressable __file,  Addressable __searchpath,  Addressable __argv) {
        var mh$ = execvP$MH();
        try {
            return (int)mh$.invokeExact(__file, __searchpath, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflagstostr$MH() {
        return RuntimeHelper.requireNonNull(constants$41.fflagstostr$MH,"fflagstostr");
    }
    public static MemoryAddress fflagstostr ( long x0) {
        var mh$ = fflagstostr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$41.getdomainname$MH,"getdomainname");
    }
    public static int getdomainname ( Addressable x0,  int x1) {
        var mh$ = getdomainname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgrouplist$MH() {
        return RuntimeHelper.requireNonNull(constants$41.getgrouplist$MH,"getgrouplist");
    }
    public static int getgrouplist ( Addressable x0,  int x1,  Addressable x2,  Addressable x3) {
        var mh$ = getgrouplist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostuuid$MH() {
        return RuntimeHelper.requireNonNull(constants$41.gethostuuid$MH,"gethostuuid");
    }
    public static int gethostuuid ( Addressable x0,  Addressable x1) {
        var mh$ = gethostuuid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getmode$MH() {
        return RuntimeHelper.requireNonNull(constants$41.getmode$MH,"getmode");
    }
    public static short getmode ( Addressable x0,  short x1) {
        var mh$ = getmode$MH();
        try {
            return (short)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeereid$MH() {
        return RuntimeHelper.requireNonNull(constants$41.getpeereid$MH,"getpeereid");
    }
    public static int getpeereid ( int x0,  Addressable x1,  Addressable x2) {
        var mh$ = getpeereid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsgroups_np$MH() {
        return RuntimeHelper.requireNonNull(constants$42.getsgroups_np$MH,"getsgroups_np");
    }
    public static int getsgroups_np ( Addressable x0,  Addressable x1) {
        var mh$ = getsgroups_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$42.getusershell$MH,"getusershell");
    }
    public static MemoryAddress getusershell () {
        var mh$ = getusershell$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwgroups_np$MH() {
        return RuntimeHelper.requireNonNull(constants$42.getwgroups_np$MH,"getwgroups_np");
    }
    public static int getwgroups_np ( Addressable x0,  Addressable x1) {
        var mh$ = getwgroups_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$42.initgroups$MH,"initgroups");
    }
    public static int initgroups ( Addressable x0,  int x1) {
        var mh$ = initgroups$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle issetugid$MH() {
        return RuntimeHelper.requireNonNull(constants$42.issetugid$MH,"issetugid");
    }
    public static int issetugid () {
        var mh$ = issetugid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$42.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable x0) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mknod$MH,"mknod");
    }
    public static int mknod ( Addressable x0,  short x1,  int x2) {
        var mh$ = mknod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkpath_np$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mkpath_np$MH,"mkpath_np");
    }
    public static int mkpath_np ( Addressable path,  short omode) {
        var mh$ = mkpath_np$MH();
        try {
            return (int)mh$.invokeExact(path, omode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkpathat_np$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mkpathat_np$MH,"mkpathat_np");
    }
    public static int mkpathat_np ( int dfd,  Addressable path,  short omode) {
        var mh$ = mkpathat_np$MH();
        try {
            return (int)mh$.invokeExact(dfd, path, omode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable x0) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable x0,  int x1) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$43.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable x0) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkostemp$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mkostemp$MH,"mkostemp");
    }
    public static int mkostemp ( Addressable path,  int oflags) {
        var mh$ = mkostemp$MH();
        try {
            return (int)mh$.invokeExact(path, oflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkostemps$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mkostemps$MH,"mkostemps");
    }
    public static int mkostemps ( Addressable path,  int slen,  int oflags) {
        var mh$ = mkostemps$MH();
        try {
            return (int)mh$.invokeExact(path, slen, oflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp_dprotected_np$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mkstemp_dprotected_np$MH,"mkstemp_dprotected_np");
    }
    public static int mkstemp_dprotected_np ( Addressable path,  int dpclass,  int dpflags) {
        var mh$ = mkstemp_dprotected_np$MH();
        try {
            return (int)mh$.invokeExact(path, dpclass, dpflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtempat_np$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mkdtempat_np$MH,"mkdtempat_np");
    }
    public static MemoryAddress mkdtempat_np ( int dfd,  Addressable path) {
        var mh$ = mkdtempat_np$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dfd, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstempsat_np$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mkstempsat_np$MH,"mkstempsat_np");
    }
    public static int mkstempsat_np ( int dfd,  Addressable path,  int slen) {
        var mh$ = mkstempsat_np$MH();
        try {
            return (int)mh$.invokeExact(dfd, path, slen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkostempsat_np$MH() {
        return RuntimeHelper.requireNonNull(constants$44.mkostempsat_np$MH,"mkostempsat_np");
    }
    public static int mkostempsat_np ( int dfd,  Addressable path,  int slen,  int oflags) {
        var mh$ = mkostempsat_np$MH();
        try {
            return (int)mh$.invokeExact(dfd, path, slen, oflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nfssvc$MH() {
        return RuntimeHelper.requireNonNull(constants$45.nfssvc$MH,"nfssvc");
    }
    public static int nfssvc ( int x0,  Addressable x1) {
        var mh$ = nfssvc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle profil$MH() {
        return RuntimeHelper.requireNonNull(constants$45.profil$MH,"profil");
    }
    public static int profil ( Addressable x0,  long x1,  long x2,  int x3) {
        var mh$ = profil$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setugid_np$MH() {
        return RuntimeHelper.requireNonNull(constants$45.pthread_setugid_np$MH,"pthread_setugid_np");
    }
    public static int pthread_setugid_np ( int x0,  int x1) {
        var mh$ = pthread_setugid_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getugid_np$MH() {
        return RuntimeHelper.requireNonNull(constants$45.pthread_getugid_np$MH,"pthread_getugid_np");
    }
    public static int pthread_getugid_np ( Addressable x0,  Addressable x1) {
        var mh$ = pthread_getugid_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reboot$MH() {
        return RuntimeHelper.requireNonNull(constants$45.reboot$MH,"reboot");
    }
    public static int reboot ( int x0) {
        var mh$ = reboot$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle revoke$MH() {
        return RuntimeHelper.requireNonNull(constants$45.revoke$MH,"revoke");
    }
    public static int revoke ( Addressable x0) {
        var mh$ = revoke$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcmd$MH() {
        return RuntimeHelper.requireNonNull(constants$46.rcmd$MH,"rcmd");
    }
    public static int rcmd ( Addressable x0,  int x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = rcmd$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcmd_af$MH() {
        return RuntimeHelper.requireNonNull(constants$46.rcmd_af$MH,"rcmd_af");
    }
    public static int rcmd_af ( Addressable x0,  int x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5,  int x6) {
        var mh$ = rcmd_af$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rresvport$MH() {
        return RuntimeHelper.requireNonNull(constants$46.rresvport$MH,"rresvport");
    }
    public static int rresvport ( Addressable x0) {
        var mh$ = rresvport$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rresvport_af$MH() {
        return RuntimeHelper.requireNonNull(constants$46.rresvport_af$MH,"rresvport_af");
    }
    public static int rresvport_af ( Addressable x0,  int x1) {
        var mh$ = rresvport_af$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iruserok$MH() {
        return RuntimeHelper.requireNonNull(constants$46.iruserok$MH,"iruserok");
    }
    public static int iruserok ( long x0,  int x1,  Addressable x2,  Addressable x3) {
        var mh$ = iruserok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iruserok_sa$MH() {
        return RuntimeHelper.requireNonNull(constants$46.iruserok_sa$MH,"iruserok_sa");
    }
    public static int iruserok_sa ( Addressable x0,  int x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = iruserok_sa$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ruserok$MH() {
        return RuntimeHelper.requireNonNull(constants$47.ruserok$MH,"ruserok");
    }
    public static int ruserok ( Addressable x0,  int x1,  Addressable x2,  Addressable x3) {
        var mh$ = ruserok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$47.setdomainname$MH,"setdomainname");
    }
    public static int setdomainname ( Addressable x0,  int x1) {
        var mh$ = setdomainname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$47.setgroups$MH,"setgroups");
    }
    public static int setgroups ( int x0,  Addressable x1) {
        var mh$ = setgroups$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sethostid$MH,"sethostid");
    }
    public static void sethostid ( long x0) {
        var mh$ = sethostid$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sethostname$MH,"sethostname");
    }
    public static int sethostname ( Addressable x0,  int x1) {
        var mh$ = sethostname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setkey$MH() {
        return RuntimeHelper.requireNonNull(constants$47.setkey$MH,"setkey");
    }
    public static void setkey ( Addressable x0) {
        var mh$ = setkey$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$48.setlogin$MH,"setlogin");
    }
    public static int setlogin ( Addressable x0) {
        var mh$ = setlogin$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setmode$MH() {
        return RuntimeHelper.requireNonNull(constants$48.setmode$MH,"setmode");
    }
    public static MemoryAddress setmode ( Addressable x0) {
        var mh$ = setmode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setrgid$MH() {
        return RuntimeHelper.requireNonNull(constants$48.setrgid$MH,"setrgid");
    }
    public static int setrgid ( int x0) {
        var mh$ = setrgid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setruid$MH() {
        return RuntimeHelper.requireNonNull(constants$48.setruid$MH,"setruid");
    }
    public static int setruid ( int x0) {
        var mh$ = setruid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsgroups_np$MH() {
        return RuntimeHelper.requireNonNull(constants$48.setsgroups_np$MH,"setsgroups_np");
    }
    public static int setsgroups_np ( int x0,  Addressable x1) {
        var mh$ = setsgroups_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$48.setusershell$MH,"setusershell");
    }
    public static void setusershell () {
        var mh$ = setusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setwgroups_np$MH() {
        return RuntimeHelper.requireNonNull(constants$49.setwgroups_np$MH,"setwgroups_np");
    }
    public static int setwgroups_np ( int x0,  Addressable x1) {
        var mh$ = setwgroups_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtofflags$MH() {
        return RuntimeHelper.requireNonNull(constants$49.strtofflags$MH,"strtofflags");
    }
    public static int strtofflags ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = strtofflags$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swapon$MH() {
        return RuntimeHelper.requireNonNull(constants$49.swapon$MH,"swapon");
    }
    public static int swapon ( Addressable x0) {
        var mh$ = swapon$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyslot$MH() {
        return RuntimeHelper.requireNonNull(constants$49.ttyslot$MH,"ttyslot");
    }
    public static int ttyslot () {
        var mh$ = ttyslot$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle undelete$MH() {
        return RuntimeHelper.requireNonNull(constants$49.undelete$MH,"undelete");
    }
    public static int undelete ( Addressable x0) {
        var mh$ = undelete$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unwhiteout$MH() {
        return RuntimeHelper.requireNonNull(constants$49.unwhiteout$MH,"unwhiteout");
    }
    public static int unwhiteout ( Addressable x0) {
        var mh$ = unwhiteout$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long x0) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syscall$MH() {
        return RuntimeHelper.requireNonNull(constants$50.syscall$MH,"syscall");
    }
    public static int syscall ( int x0, Object... x1) {
        var mh$ = syscall$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout suboptarg$LAYOUT() {
        return constants$50.suboptarg$LAYOUT;
    }
    public static VarHandle suboptarg$VH() {
        return constants$50.suboptarg$VH;
    }
    public static MemorySegment suboptarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$50.suboptarg$SEGMENT,"suboptarg");
    }
    public static MemoryAddress suboptarg$get() {
        return (java.lang.foreign.MemoryAddress) constants$50.suboptarg$VH.get(RuntimeHelper.requireNonNull(constants$50.suboptarg$SEGMENT, "suboptarg"));
    }
    public static void suboptarg$set( MemoryAddress x) {
        constants$50.suboptarg$VH.set(RuntimeHelper.requireNonNull(constants$50.suboptarg$SEGMENT, "suboptarg"), x);
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$50.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetattrlist$MH() {
        return RuntimeHelper.requireNonNull(constants$50.fgetattrlist$MH,"fgetattrlist");
    }
    public static int fgetattrlist ( int x0,  Addressable x1,  Addressable x2,  long x3,  int x4) {
        var mh$ = fgetattrlist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetattrlist$MH() {
        return RuntimeHelper.requireNonNull(constants$50.fsetattrlist$MH,"fsetattrlist");
    }
    public static int fsetattrlist ( int x0,  Addressable x1,  Addressable x2,  long x3,  int x4) {
        var mh$ = fsetattrlist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getattrlist$MH() {
        return RuntimeHelper.requireNonNull(constants$51.getattrlist$MH,"getattrlist");
    }
    public static int getattrlist ( Addressable x0,  Addressable x1,  Addressable x2,  long x3,  int x4) {
        var mh$ = getattrlist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setattrlist$MH() {
        return RuntimeHelper.requireNonNull(constants$51.setattrlist$MH,"setattrlist");
    }
    public static int setattrlist ( Addressable x0,  Addressable x1,  Addressable x2,  long x3,  int x4) {
        var mh$ = setattrlist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exchangedata$MH() {
        return RuntimeHelper.requireNonNull(constants$51.exchangedata$MH,"exchangedata");
    }
    public static int exchangedata ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = exchangedata$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdirentriesattr$MH() {
        return RuntimeHelper.requireNonNull(constants$51.getdirentriesattr$MH,"getdirentriesattr");
    }
    public static int getdirentriesattr ( int x0,  Addressable x1,  Addressable x2,  long x3,  Addressable x4,  Addressable x5,  Addressable x6,  int x7) {
        var mh$ = getdirentriesattr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle searchfs$MH() {
        return RuntimeHelper.requireNonNull(constants$51.searchfs$MH,"searchfs");
    }
    public static int searchfs ( Addressable x0,  Addressable x1,  Addressable x2,  int x3,  int x4,  Addressable x5) {
        var mh$ = searchfs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsctl$MH() {
        return RuntimeHelper.requireNonNull(constants$51.fsctl$MH,"fsctl");
    }
    public static int fsctl ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = fsctl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsctl$MH() {
        return RuntimeHelper.requireNonNull(constants$52.ffsctl$MH,"ffsctl");
    }
    public static int ffsctl ( int x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = ffsctl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync_volume_np$MH() {
        return RuntimeHelper.requireNonNull(constants$52.fsync_volume_np$MH,"fsync_volume_np");
    }
    public static int fsync_volume_np ( int x0,  int x1) {
        var mh$ = fsync_volume_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync_volume_np$MH() {
        return RuntimeHelper.requireNonNull(constants$52.sync_volume_np$MH,"sync_volume_np");
    }
    public static int sync_volume_np ( Addressable x0,  int x1) {
        var mh$ = sync_volume_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optreset$LAYOUT() {
        return constants$52.optreset$LAYOUT;
    }
    public static VarHandle optreset$VH() {
        return constants$52.optreset$VH;
    }
    public static MemorySegment optreset$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$52.optreset$SEGMENT,"optreset");
    }
    public static int optreset$get() {
        return (int) constants$52.optreset$VH.get(RuntimeHelper.requireNonNull(constants$52.optreset$SEGMENT, "optreset"));
    }
    public static void optreset$set( int x) {
        constants$52.optreset$VH.set(RuntimeHelper.requireNonNull(constants$52.optreset$SEGMENT, "optreset"), x);
    }
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$52.__DARWIN_SUF_64_BIT_INO_T$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$52.__DARWIN_SUF_1050$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$53.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)120000L;
    }
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)120300L;
    }
    public static MemoryAddress __DARWIN_NULL() {
        return constants$53.__DARWIN_NULL$ADDR;
    }
    public static int __DARWIN_WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __DARWIN_WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int __DARWIN_WEOF() {
        return (int)-1L;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static MemoryAddress NULL() {
        return constants$53.NULL$ADDR;
    }
    public static int EOF() {
        return (int)-1L;
    }
    public static MemorySegment P_tmpdir() {
        return constants$53.P_tmpdir$SEGMENT;
    }
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)6L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_MONOTONIC_RAW_APPROX() {
        return (int)5L;
    }
    public static int CLOCK_UPTIME_RAW() {
        return (int)8L;
    }
    public static int CLOCK_UPTIME_RAW_APPROX() {
        return (int)9L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)12L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)16L;
    }
    public static int __DARWIN_BYTE_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static long __DARWIN_NFDBITS() {
        return 32L;
    }
    public static int NBBY() {
        return (int)8L;
    }
    public static long NFDBITS() {
        return 32L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static long _POSIX_VERSION() {
        return 200112L;
    }
    public static long _POSIX2_VERSION() {
        return 200112L;
    }
    public static byte _POSIX_VDISABLE() {
        return (byte)255L;
    }
    public static int X_OK() {
        return (int)1L;
    }
    public static int W_OK() {
        return (int)2L;
    }
    public static int R_OK() {
        return (int)4L;
    }
    public static int _READ_OK() {
        return (int)512L;
    }
    public static int _WRITE_OK() {
        return (int)1024L;
    }
    public static int _EXECUTE_OK() {
        return (int)2048L;
    }
    public static int _DELETE_OK() {
        return (int)4096L;
    }
    public static int _APPEND_OK() {
        return (int)8192L;
    }
    public static int _RMFILE_OK() {
        return (int)16384L;
    }
    public static int _RATTR_OK() {
        return (int)32768L;
    }
    public static int _WATTR_OK() {
        return (int)65536L;
    }
    public static int _REXT_OK() {
        return (int)131072L;
    }
    public static int _WEXT_OK() {
        return (int)262144L;
    }
    public static int _RPERM_OK() {
        return (int)524288L;
    }
    public static int _WPERM_OK() {
        return (int)1048576L;
    }
    public static int _CHOWN_OK() {
        return (int)2097152L;
    }
    public static int _ACCESS_EXTENDED_MASK() {
        return (int)4193792L;
    }
    public static int L_SET() {
        return (int)0L;
    }
    public static int L_INCR() {
        return (int)1L;
    }
    public static int L_XTND() {
        return (int)2L;
    }
    public static int ACCESSX_MAX_TABLESIZE() {
        return (int)16384L;
    }
    public static int _POSIX_ADVISORY_INFO() {
        return (int)-1L;
    }
    public static int _POSIX_ASYNCHRONOUS_IO() {
        return (int)-1L;
    }
    public static int _POSIX_BARRIERS() {
        return (int)-1L;
    }
    public static long _POSIX_CHOWN_RESTRICTED() {
        return 200112L;
    }
    public static int _POSIX_CLOCK_SELECTION() {
        return (int)-1L;
    }
    public static int _POSIX_CPUTIME() {
        return (int)-1L;
    }
    public static long _POSIX_FSYNC() {
        return 200112L;
    }
    public static long _POSIX_IPV6() {
        return 200112L;
    }
    public static long _POSIX_JOB_CONTROL() {
        return 200112L;
    }
    public static long _POSIX_MAPPED_FILES() {
        return 200112L;
    }
    public static int _POSIX_MEMLOCK() {
        return (int)-1L;
    }
    public static int _POSIX_MEMLOCK_RANGE() {
        return (int)-1L;
    }
    public static long _POSIX_MEMORY_PROTECTION() {
        return 200112L;
    }
    public static int _POSIX_MESSAGE_PASSING() {
        return (int)-1L;
    }
    public static int _POSIX_MONOTONIC_CLOCK() {
        return (int)-1L;
    }
    public static long _POSIX_NO_TRUNC() {
        return 200112L;
    }
    public static int _POSIX_PRIORITIZED_IO() {
        return (int)-1L;
    }
    public static int _POSIX_PRIORITY_SCHEDULING() {
        return (int)-1L;
    }
    public static int _POSIX_RAW_SOCKETS() {
        return (int)-1L;
    }
    public static long _POSIX_READER_WRITER_LOCKS() {
        return 200112L;
    }
    public static int _POSIX_REALTIME_SIGNALS() {
        return (int)-1L;
    }
    public static long _POSIX_REGEXP() {
        return 200112L;
    }
    public static long _POSIX_SAVED_IDS() {
        return 200112L;
    }
    public static int _POSIX_SEMAPHORES() {
        return (int)-1L;
    }
    public static int _POSIX_SHARED_MEMORY_OBJECTS() {
        return (int)-1L;
    }
    public static long _POSIX_SHELL() {
        return 200112L;
    }
    public static int _POSIX_SPAWN() {
        return (int)-1L;
    }
    public static int _POSIX_SPIN_LOCKS() {
        return (int)-1L;
    }
    public static int _POSIX_SPORADIC_SERVER() {
        return (int)-1L;
    }
    public static int _POSIX_SYNCHRONIZED_IO() {
        return (int)-1L;
    }
    public static long _POSIX_THREAD_ATTR_STACKADDR() {
        return 200112L;
    }
    public static long _POSIX_THREAD_ATTR_STACKSIZE() {
        return 200112L;
    }
    public static int _POSIX_THREAD_CPUTIME() {
        return (int)-1L;
    }
    public static int _POSIX_THREAD_PRIO_INHERIT() {
        return (int)-1L;
    }
    public static int _POSIX_THREAD_PRIO_PROTECT() {
        return (int)-1L;
    }
    public static int _POSIX_THREAD_PRIORITY_SCHEDULING() {
        return (int)-1L;
    }
    public static long _POSIX_THREAD_PROCESS_SHARED() {
        return 200112L;
    }
    public static long _POSIX_THREAD_SAFE_FUNCTIONS() {
        return 200112L;
    }
    public static int _POSIX_THREAD_SPORADIC_SERVER() {
        return (int)-1L;
    }
    public static long _POSIX_THREADS() {
        return 200112L;
    }
    public static int _POSIX_TIMEOUTS() {
        return (int)-1L;
    }
    public static int _POSIX_TIMERS() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_EVENT_FILTER() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_INHERIT() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_LOG() {
        return (int)-1L;
    }
    public static int _POSIX_TYPED_MEMORY_OBJECTS() {
        return (int)-1L;
    }
    public static long _POSIX2_C_BIND() {
        return 200112L;
    }
    public static long _POSIX2_C_DEV() {
        return 200112L;
    }
    public static long _POSIX2_CHAR_TERM() {
        return 200112L;
    }
    public static int _POSIX2_FORT_DEV() {
        return (int)-1L;
    }
    public static long _POSIX2_FORT_RUN() {
        return 200112L;
    }
    public static long _POSIX2_LOCALEDEF() {
        return 200112L;
    }
    public static int _POSIX2_PBS() {
        return (int)-1L;
    }
    public static int _POSIX2_PBS_ACCOUNTING() {
        return (int)-1L;
    }
    public static int _POSIX2_PBS_CHECKPOINT() {
        return (int)-1L;
    }
    public static int _POSIX2_PBS_LOCATE() {
        return (int)-1L;
    }
    public static int _POSIX2_PBS_MESSAGE() {
        return (int)-1L;
    }
    public static int _POSIX2_PBS_TRACK() {
        return (int)-1L;
    }
    public static long _POSIX2_SW_DEV() {
        return 200112L;
    }
    public static long _POSIX2_UPE() {
        return 200112L;
    }
    public static int __ILP32_OFF32() {
        return (int)-1L;
    }
    public static int __ILP32_OFFBIG() {
        return (int)-1L;
    }
    public static int __LP64_OFF64() {
        return (int)1L;
    }
    public static int __LPBIG_OFFBIG() {
        return (int)1L;
    }
    public static int _POSIX_V6_ILP32_OFF32() {
        return (int)-1L;
    }
    public static int _POSIX_V6_ILP32_OFFBIG() {
        return (int)-1L;
    }
    public static int _POSIX_V6_LP64_OFF64() {
        return (int)1L;
    }
    public static int _POSIX_V6_LPBIG_OFFBIG() {
        return (int)1L;
    }
    public static int _POSIX_V7_ILP32_OFF32() {
        return (int)-1L;
    }
    public static int _POSIX_V7_ILP32_OFFBIG() {
        return (int)-1L;
    }
    public static int _POSIX_V7_LP64_OFF64() {
        return (int)1L;
    }
    public static int _POSIX_V7_LPBIG_OFFBIG() {
        return (int)1L;
    }
    public static int _V6_ILP32_OFF32() {
        return (int)-1L;
    }
    public static int _V6_ILP32_OFFBIG() {
        return (int)-1L;
    }
    public static int _V6_LP64_OFF64() {
        return (int)1L;
    }
    public static int _V6_LPBIG_OFFBIG() {
        return (int)1L;
    }
    public static int _XBS5_ILP32_OFF32() {
        return (int)-1L;
    }
    public static int _XBS5_ILP32_OFFBIG() {
        return (int)-1L;
    }
    public static int _XBS5_LP64_OFF64() {
        return (int)1L;
    }
    public static int _XBS5_LPBIG_OFFBIG() {
        return (int)1L;
    }
    public static int _XOPEN_CRYPT() {
        return (int)1L;
    }
    public static int _XOPEN_ENH_I18N() {
        return (int)1L;
    }
    public static int _XOPEN_LEGACY() {
        return (int)-1L;
    }
    public static int _XOPEN_REALTIME() {
        return (int)-1L;
    }
    public static int _XOPEN_REALTIME_THREADS() {
        return (int)-1L;
    }
    public static int _XOPEN_SHM() {
        return (int)1L;
    }
    public static int _XOPEN_STREAMS() {
        return (int)-1L;
    }
    public static int _XOPEN_UNIX() {
        return (int)1L;
    }
    public static int _SC_PAGE_SIZE() {
        return (int)29L;
    }
}


