// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class __sFILE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("_p"),
        Constants$root.C_INT$LAYOUT.withName("_r"),
        Constants$root.C_INT$LAYOUT.withName("_w"),
        Constants$root.C_SHORT$LAYOUT.withName("_flags"),
        Constants$root.C_SHORT$LAYOUT.withName("_file"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("_base"),
            Constants$root.C_INT$LAYOUT.withName("_size"),
            MemoryLayout.paddingLayout(32)
        ).withName("_bf"),
        Constants$root.C_INT$LAYOUT.withName("_lbfsize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("_cookie"),
        Constants$root.C_POINTER$LAYOUT.withName("_close"),
        Constants$root.C_POINTER$LAYOUT.withName("_read"),
        Constants$root.C_POINTER$LAYOUT.withName("_seek"),
        Constants$root.C_POINTER$LAYOUT.withName("_write"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("_base"),
            Constants$root.C_INT$LAYOUT.withName("_size"),
            MemoryLayout.paddingLayout(32)
        ).withName("_ub"),
        Constants$root.C_POINTER$LAYOUT.withName("_extra"),
        Constants$root.C_INT$LAYOUT.withName("_ur"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("_ubuf"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("_nbuf"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("_base"),
            Constants$root.C_INT$LAYOUT.withName("_size"),
            MemoryLayout.paddingLayout(32)
        ).withName("_lb"),
        Constants$root.C_INT$LAYOUT.withName("_blksize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("_offset")
    ).withName("__sFILE");
    public static MemoryLayout $LAYOUT() {
        return __sFILE.$struct$LAYOUT;
    }
    static final VarHandle _p$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_p"));
    public static VarHandle _p$VH() {
        return __sFILE._p$VH;
    }
    public static MemoryAddress _p$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sFILE._p$VH.get(seg);
    }
    public static void _p$set( MemorySegment seg, MemoryAddress x) {
        __sFILE._p$VH.set(seg, x);
    }
    public static MemoryAddress _p$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sFILE._p$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _p$set(MemorySegment seg, long index, MemoryAddress x) {
        __sFILE._p$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _r$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_r"));
    public static VarHandle _r$VH() {
        return __sFILE._r$VH;
    }
    public static int _r$get(MemorySegment seg) {
        return (int)__sFILE._r$VH.get(seg);
    }
    public static void _r$set( MemorySegment seg, int x) {
        __sFILE._r$VH.set(seg, x);
    }
    public static int _r$get(MemorySegment seg, long index) {
        return (int)__sFILE._r$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _r$set(MemorySegment seg, long index, int x) {
        __sFILE._r$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _w$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_w"));
    public static VarHandle _w$VH() {
        return __sFILE._w$VH;
    }
    public static int _w$get(MemorySegment seg) {
        return (int)__sFILE._w$VH.get(seg);
    }
    public static void _w$set( MemorySegment seg, int x) {
        __sFILE._w$VH.set(seg, x);
    }
    public static int _w$get(MemorySegment seg, long index) {
        return (int)__sFILE._w$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _w$set(MemorySegment seg, long index, int x) {
        __sFILE._w$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_flags"));
    public static VarHandle _flags$VH() {
        return __sFILE._flags$VH;
    }
    public static short _flags$get(MemorySegment seg) {
        return (short)__sFILE._flags$VH.get(seg);
    }
    public static void _flags$set( MemorySegment seg, short x) {
        __sFILE._flags$VH.set(seg, x);
    }
    public static short _flags$get(MemorySegment seg, long index) {
        return (short)__sFILE._flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _flags$set(MemorySegment seg, long index, short x) {
        __sFILE._flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _file$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_file"));
    public static VarHandle _file$VH() {
        return __sFILE._file$VH;
    }
    public static short _file$get(MemorySegment seg) {
        return (short)__sFILE._file$VH.get(seg);
    }
    public static void _file$set( MemorySegment seg, short x) {
        __sFILE._file$VH.set(seg, x);
    }
    public static short _file$get(MemorySegment seg, long index) {
        return (short)__sFILE._file$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _file$set(MemorySegment seg, long index, short x) {
        __sFILE._file$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment _bf$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    static final VarHandle _lbfsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_lbfsize"));
    public static VarHandle _lbfsize$VH() {
        return __sFILE._lbfsize$VH;
    }
    public static int _lbfsize$get(MemorySegment seg) {
        return (int)__sFILE._lbfsize$VH.get(seg);
    }
    public static void _lbfsize$set( MemorySegment seg, int x) {
        __sFILE._lbfsize$VH.set(seg, x);
    }
    public static int _lbfsize$get(MemorySegment seg, long index) {
        return (int)__sFILE._lbfsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _lbfsize$set(MemorySegment seg, long index, int x) {
        __sFILE._lbfsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _cookie$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_cookie"));
    public static VarHandle _cookie$VH() {
        return __sFILE._cookie$VH;
    }
    public static MemoryAddress _cookie$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sFILE._cookie$VH.get(seg);
    }
    public static void _cookie$set( MemorySegment seg, MemoryAddress x) {
        __sFILE._cookie$VH.set(seg, x);
    }
    public static MemoryAddress _cookie$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sFILE._cookie$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _cookie$set(MemorySegment seg, long index, MemoryAddress x) {
        __sFILE._cookie$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor _close$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _close$MH = RuntimeHelper.downcallHandle(
        __sFILE._close$FUNC
    );
    public interface _close {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(_close fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_close.class, fi, __sFILE._close$FUNC, session);
        }
        static _close ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)__sFILE._close$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _close$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_close"));
    public static VarHandle _close$VH() {
        return __sFILE._close$VH;
    }
    public static MemoryAddress _close$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sFILE._close$VH.get(seg);
    }
    public static void _close$set( MemorySegment seg, MemoryAddress x) {
        __sFILE._close$VH.set(seg, x);
    }
    public static MemoryAddress _close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sFILE._close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _close$set(MemorySegment seg, long index, MemoryAddress x) {
        __sFILE._close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _close _close (MemorySegment segment, MemorySession session) {
        return _close.ofAddress(_close$get(segment), session);
    }
    static final FunctionDescriptor _read$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle _read$MH = RuntimeHelper.downcallHandle(
        __sFILE._read$FUNC
    );
    public interface _read {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(_read fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_read.class, fi, __sFILE._read$FUNC, session);
        }
        static _read ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (int)__sFILE._read$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_read"));
    public static VarHandle _read$VH() {
        return __sFILE._read$VH;
    }
    public static MemoryAddress _read$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sFILE._read$VH.get(seg);
    }
    public static void _read$set( MemorySegment seg, MemoryAddress x) {
        __sFILE._read$VH.set(seg, x);
    }
    public static MemoryAddress _read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sFILE._read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _read$set(MemorySegment seg, long index, MemoryAddress x) {
        __sFILE._read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _read _read (MemorySegment segment, MemorySession session) {
        return _read.ofAddress(_read$get(segment), session);
    }
    static final FunctionDescriptor _seek$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle _seek$MH = RuntimeHelper.downcallHandle(
        __sFILE._seek$FUNC
    );
    public interface _seek {

        long apply(java.lang.foreign.MemoryAddress _x0, long _x1, int _x2);
        static MemorySegment allocate(_seek fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_seek.class, fi, __sFILE._seek$FUNC, session);
        }
        static _seek ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1, int __x2) -> {
                try {
                    return (long)__sFILE._seek$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_seek"));
    public static VarHandle _seek$VH() {
        return __sFILE._seek$VH;
    }
    public static MemoryAddress _seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sFILE._seek$VH.get(seg);
    }
    public static void _seek$set( MemorySegment seg, MemoryAddress x) {
        __sFILE._seek$VH.set(seg, x);
    }
    public static MemoryAddress _seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sFILE._seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _seek$set(MemorySegment seg, long index, MemoryAddress x) {
        __sFILE._seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _seek _seek (MemorySegment segment, MemorySession session) {
        return _seek.ofAddress(_seek$get(segment), session);
    }
    static final FunctionDescriptor _write$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle _write$MH = RuntimeHelper.downcallHandle(
        __sFILE._write$FUNC
    );
    public interface _write {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(_write fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_write.class, fi, __sFILE._write$FUNC, session);
        }
        static _write ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (int)__sFILE._write$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _write$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_write"));
    public static VarHandle _write$VH() {
        return __sFILE._write$VH;
    }
    public static MemoryAddress _write$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sFILE._write$VH.get(seg);
    }
    public static void _write$set( MemorySegment seg, MemoryAddress x) {
        __sFILE._write$VH.set(seg, x);
    }
    public static MemoryAddress _write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sFILE._write$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _write$set(MemorySegment seg, long index, MemoryAddress x) {
        __sFILE._write$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _write _write (MemorySegment segment, MemorySession session) {
        return _write.ofAddress(_write$get(segment), session);
    }
    public static MemorySegment _ub$slice(MemorySegment seg) {
        return seg.asSlice(88, 16);
    }
    static final VarHandle _extra$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_extra"));
    public static VarHandle _extra$VH() {
        return __sFILE._extra$VH;
    }
    public static MemoryAddress _extra$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)__sFILE._extra$VH.get(seg);
    }
    public static void _extra$set( MemorySegment seg, MemoryAddress x) {
        __sFILE._extra$VH.set(seg, x);
    }
    public static MemoryAddress _extra$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)__sFILE._extra$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _extra$set(MemorySegment seg, long index, MemoryAddress x) {
        __sFILE._extra$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _ur$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_ur"));
    public static VarHandle _ur$VH() {
        return __sFILE._ur$VH;
    }
    public static int _ur$get(MemorySegment seg) {
        return (int)__sFILE._ur$VH.get(seg);
    }
    public static void _ur$set( MemorySegment seg, int x) {
        __sFILE._ur$VH.set(seg, x);
    }
    public static int _ur$get(MemorySegment seg, long index) {
        return (int)__sFILE._ur$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _ur$set(MemorySegment seg, long index, int x) {
        __sFILE._ur$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment _ubuf$slice(MemorySegment seg) {
        return seg.asSlice(116, 3);
    }
    public static MemorySegment _nbuf$slice(MemorySegment seg) {
        return seg.asSlice(119, 1);
    }
    public static MemorySegment _lb$slice(MemorySegment seg) {
        return seg.asSlice(120, 16);
    }
    static final VarHandle _blksize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_blksize"));
    public static VarHandle _blksize$VH() {
        return __sFILE._blksize$VH;
    }
    public static int _blksize$get(MemorySegment seg) {
        return (int)__sFILE._blksize$VH.get(seg);
    }
    public static void _blksize$set( MemorySegment seg, int x) {
        __sFILE._blksize$VH.set(seg, x);
    }
    public static int _blksize$get(MemorySegment seg, long index) {
        return (int)__sFILE._blksize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _blksize$set(MemorySegment seg, long index, int x) {
        __sFILE._blksize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle _offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_offset"));
    public static VarHandle _offset$VH() {
        return __sFILE._offset$VH;
    }
    public static long _offset$get(MemorySegment seg) {
        return (long)__sFILE._offset$VH.get(seg);
    }
    public static void _offset$set( MemorySegment seg, long x) {
        __sFILE._offset$VH.set(seg, x);
    }
    public static long _offset$get(MemorySegment seg, long index) {
        return (long)__sFILE._offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _offset$set(MemorySegment seg, long index, long x) {
        __sFILE._offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


