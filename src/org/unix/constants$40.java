// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$40 {

    static final FunctionDescriptor _Exit$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle _Exit$MH = RuntimeHelper.downcallHandle(
        "_Exit",
        constants$40._Exit$FUNC
    );
    static final FunctionDescriptor accessx_np$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle accessx_np$MH = RuntimeHelper.downcallHandle(
        "accessx_np",
        constants$40.accessx_np$FUNC
    );
    static final FunctionDescriptor acct$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle acct$MH = RuntimeHelper.downcallHandle(
        "acct",
        constants$40.acct$FUNC
    );
    static final FunctionDescriptor add_profil$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle add_profil$MH = RuntimeHelper.downcallHandle(
        "add_profil",
        constants$40.add_profil$FUNC
    );
    static final FunctionDescriptor endusershell$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle endusershell$MH = RuntimeHelper.downcallHandle(
        "endusershell",
        constants$40.endusershell$FUNC
    );
    static final FunctionDescriptor execvP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle execvP$MH = RuntimeHelper.downcallHandle(
        "execvP",
        constants$40.execvP$FUNC
    );
}


